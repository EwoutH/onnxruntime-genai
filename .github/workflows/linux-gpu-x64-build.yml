name: "Linux GPU x64 Build"
on: [ workflow_dispatch, pull_request ]

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

env:
  ORT_NIGHTLY_REST_API: "https://feeds.dev.azure.com/aiinfra/PublicPackages/_apis/packaging/Feeds/ORT-Nightly/packages?packageNameQuery=Microsoft.ML.OnnxRuntime.Gpu.Linux&api-version=6.0-preview.1"
  ORT_PACKAGE_NAME: Microsoft.ML.OnnxRuntime.Gpu.Linux
  ORT_PACKAGE_NAME_L: "microsoft.ml.onnxruntime.gpu.linux"
  ORT_NIGHTLY_SOURCE: "https://aiinfra.pkgs.visualstudio.com/PublicPackages/_packaging/ORT-Nightly/nuget/v3/index.json"


jobs:
  linux-gpu-x64-build:
    runs-on: [ "self-hosted", "1ES.Pool=onnxruntime-genai-Ubuntu2004-T4" ]
    steps:
      - name: Checkout OnnxRuntime GenAI repo
        uses: actions/checkout@v4
        with:
          submodules: true
      - name: Install jq and dotnet
        run: |
          wget https://packages.microsoft.com/config/ubuntu/20.04/packages-microsoft-prod.deb -O packages-microsoft-prod.deb
          sudo dpkg -i packages-microsoft-prod.deb
          rm packages-microsoft-prod.deb
          sudo apt-get update && sudo apt-get install -y dotnet-sdk-8.0 jq

      - name: Get the Latest OnnxRuntime Nightly Version
        run: |
          ORT_NIGHTLY_VERSION=$(curl -s "${{ env.ORT_NIGHTLY_REST_API }}" | jq -r '.value[0].versions[0].normalizedVersion')
          echo "$ORT_NIGHTLY_VERSION" 
          echo "ORT_NIGHTLY_VERSION=$ORT_NIGHTLY_VERSION" >> $GITHUB_ENV

      - name: Download OnnxRuntime Nightly
        run: |
          dotnet add test/csharp/Microsoft.ML.OnnxRuntimeGenAI.Tests.csproj package "${{ env.ORT_PACKAGE_NAME }}" --version "${{ env.ORT_NIGHTLY_VERSION }}" --source "${{ env.ORT_NIGHTLY_SOURCE }}" --package-directory .
        continue-on-error: true
      - name: list files
        shell: bash
        run: |
          ls -l
          ls -R ${{ env.ORT_PACKAGE_NAME_L }}
        continue-on-error: true

      - name: Extra OnnxRuntime library and header files
        run: |
          mkdir -p ort/lib
          mv ${{ env.ORT_PACKAGE_NAME_L }}/${{ env.ORT_NIGHTLY_VERSION }}/buildTransitive/native/include ort/
          mv ${{ env.ORT_PACKAGE_NAME_L }}/${{ env.ORT_NIGHTLY_VERSION }}/runtimes/linux-x64/native/* ort/lib/


      - name: Download Docker Image
        run: |
          set -e -x
          az login --identity --username 63b63039-6328-442f-954b-5a64d124e5b4
          az acr login --name onnxruntimebuildcache --subscription 00c06639-6ee4-454e-8058-8d8b1703bd87
          python3 tools/ci_build/get_docker_image.py --dockerfile tools/ci_build/github/linux/docker/inference/x64/default/gpu/Dockerfile \
            --context tools/ci_build/github/linux/docker/inference/x64/default/gpu \
            --docker-build-args "--build-arg BUILD_UID=$( id -u )" \
            --container-registry onnxruntimebuildcache \
            --repository ort_genai_linux_gpu_gha

      - name: Print Docker Image Environment Variables
        run: |
          echo "Printing docker image environment variables"
          docker run --rm ort_genai_linux_gpu_gha env

      - name: Build with Cmake in Docker
        run: |
          echo "Running docker image ort_genai_linux_gpu_gha"
          docker run \
            --gpus all \
            --rm \
            --volume $GITHUB_WORKSPACE:/onnxruntime_src \
            -w /onnxruntime_src ort_genai_linux_gpu_gha bash -c "echo $PATH && /usr/bin/cmake -DCMAKE_CUDA_ARCHITECTURES=86 --preset linux_gcc_cuda_release && /usr/bin/cmake --build --preset linux_gcc_cuda_release"
      
      - name: Install the onnxruntime-genai Python wheel and run Python tests
        run: |
          echo "Installing the onnxruntime-genai Python wheel and running the Python tests"
          docker run \
            --gpus all \
            --rm \
            --volume $GITHUB_WORKSPACE:/onnxruntime_src \
            -w /onnxruntime_src ort_genai_linux_gpu_gha bash -c "python3 -m pip install /onnxruntime_src/build/cuda/wheel/onnxruntime_genai*.whl --user && python3 -m pip install -r test/python/requirements.txt --user && python3 test/python/test_onnxruntime_genai.py --cwd test/python --test_models test/test_models"

      - name: Docker -- Run tests
        run: |
          echo "Running docker image ort_genai_linux_gpu_gha"
          docker run \
            --gpus all \
            --rm \
            --volume $GITHUB_WORKSPACE:/onnxruntime_src \
            -w /onnxruntime_src ort_genai_linux_gpu_gha bash -c "/onnxruntime_src/build/cuda/test/unit_tests"
